package sample;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Scanner;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class Main extends Application {
    private static ArrayList<String> girlNames = new ArrayList();
    private static ArrayList<String> boyNames = new ArrayList();
    private static ArrayList<String> duplicateNames = new ArrayList();
    private static ArrayList<String> newListForBoysWithoutDuplicates = new ArrayList();
    private static Label numOfNames = new Label();
    private static ListView commonNames = new ListView();
    private static ListView sorted = new ListView();
    private static ListView sorted2 = new ListView();
    Scene scene;
    Scene scene2;
    Stage secondaryStage = new Stage();

    public Main() {
    }

    public void start(Stage primaryStage) throws Exception {
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(20.0D, 20.0D, 20.0D, 20.0D));
        grid.setVgap(8.0D);
        grid.setHgap(10.0D);
        Label fileName = new Label("Enter a file name to rank baby names:");
        GridPane.setConstraints(fileName, 0, 0);
        TextField fn = new TextField();
        GridPane.setConstraints(fn, 1, 0);
        Button submitBtn = new Button("Submit");
        GridPane.setConstraints(submitBtn, 0, 5);
        submitBtn.setOnAction((e) -> {
            try {
                addToList(fn.getText());
                duplicateNames = new ArrayList(boyNames);
                duplicateNames.retainAll(girlNames);
                numOfNames = new Label(duplicateNames.size() + " names used for both genders");
                GridPane.setConstraints(numOfNames, 0, 2);
                Label lbl = new Label("They are: ");
                GridPane.setConstraints(lbl, 0, 3);
                namesAre();
                grid.getChildren().addAll(new Node[]{numOfNames, lbl, commonNames});
            } catch (IOException var4) {
                var4.printStackTrace();
            }

        });
        Button sortBtn = new Button("Sort");
        GridPane.setConstraints(sortBtn, 1, 5);
        sortBtn.setOnAction((ex) -> {
            display();
            Label boys = new Label("Boys:");
            GridPane.setConstraints(boys, 0, 0);
            Label girls = new Label("Girls:");
            GridPane.setConstraints(girls, 2, 0);
            GridPane grid2 = new GridPane();
            grid2.setPadding(new Insets(20.0D, 20.0D, 20.0D, 20.0D));
            grid2.setVgap(8.0D);
            grid2.setHgap(10.0D);
            grid2.getChildren().addAll(new Node[]{boys, sorted, girls, sorted2});
            grid2.setAlignment(Pos.CENTER);
            this.scene2 = new Scene(grid2, 700.0D, 500.0D);
            this.secondaryStage.setTitle("Sorted Names");
            this.secondaryStage.setScene(this.scene2);
            this.secondaryStage.show();
        });
        primaryStage.setTitle("Rank Baby Names");
        grid.getChildren().addAll(new Node[]{fileName, fn, submitBtn, sortBtn});
        primaryStage.setScene(new Scene(grid, 450.0D, 450.0D));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    private static void addToList(String fileName) throws IOException {
        Scanner input = new Scanner(System.in);
        input.close();
        input = new Scanner(new File(fileName.toLowerCase()));

        while(input.hasNext()) {
            input.nextInt();
            boyNames.add(input.next());
            input.nextInt();
            girlNames.add(input.next());
            input.nextInt();
        }

    }

    private static void namesAre() {
        Iterator iterator = duplicateNames.iterator();

        while(iterator.hasNext()) {
            commonNames.getItems().addAll(new Object[]{iterator.next() + " "});
            GridPane.setConstraints(commonNames, 0, 4);
        }

    }

    private static void sortNames() {
        Collections.sort(boyNames);
        Collections.sort(girlNames);
    }

    private static void removeDuplicates() {
        sortNames();
        Iterator var0 = boyNames.iterator();

        while(var0.hasNext()) {
            String name = (String)var0.next();
            if (!girlNames.contains(name)) {
                newListForBoysWithoutDuplicates.add(name);
            }
        }

    }

    private static void display() {
        removeDuplicates();
        Iterator iterator = newListForBoysWithoutDuplicates.iterator();
        Iterator iterator2 = girlNames.iterator();

        while(iterator.hasNext()) {
            sorted.getItems().addAll(new Object[]{iterator.next() + " "});
            GridPane.setConstraints(sorted, 1, 0);
        }

        while(iterator2.hasNext()) {
            sorted2.getItems().addAll(new Object[]{iterator2.next() + " "});
            GridPane.setConstraints(sorted2, 3, 0);
        }

    }
}
